{"version":3,"sources":["utils/api.js","components/Images.js","components/SearchImages.js","App.js","serviceWorker.js","index.js"],"names":["unsplash","Unsplash","applicationId","secret","Images","props","react_default","a","createElement","className","col1","map","img","href","links","html","target","key","id","src","urls","small","col2","col3","SearchImages","search1","search2","search3","App","state","query","_this2","this","photos","listPhotos","then","response","json","data","setState","console","log","catch","err","error","_this3","search","trim","results","_this4","type","placeholder","onChange","event","handleInput","value","Object","keys","Images_Images","SearchImages_SearchImages","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+QAEaA,EAAW,WAAIC,GAAS,CACjCC,cAAe,mEACfC,OAAQ,qECFCC,EAAS,SAAAC,GAElB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAEXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACVJ,EAAMK,KAAKC,IAAI,SAAAC,GAAG,OACfN,EAAAC,EAAAC,cAAA,KAAGK,KAAMD,EAAIE,MAAMC,KAAMC,OAAO,SAASC,IAAKL,EAAIM,IAC9CZ,EAAAC,EAAAC,cAAA,OAAKW,IAAKP,EAAIQ,KAAKC,YAK/Bf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACVJ,EAAMiB,KAAKX,IAAI,SAAAC,GAAG,OACfN,EAAAC,EAAAC,cAAA,KAAGK,KAAMD,EAAIE,MAAMC,KAAMC,OAAO,SAASC,IAAKL,EAAIM,IAC9CZ,EAAAC,EAAAC,cAAA,OAAKW,IAAKP,EAAIQ,KAAKC,YAK/Bf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACVJ,EAAMkB,KAAKZ,IAAI,SAAAC,GAAG,OACfN,EAAAC,EAAAC,cAAA,KAAGK,KAAMD,EAAIE,MAAMC,KAAMC,OAAO,SAASC,IAAKL,EAAIM,IAC9CZ,EAAAC,EAAAC,cAAA,OAAKW,IAAKP,EAAIQ,KAAKC,cCxB9BG,EAAe,SAAAnB,GACxB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACVJ,EAAMoB,QAAQd,IAAI,SAAAC,GAAG,OAClBN,EAAAC,EAAAC,cAAA,KAAGK,KAAMD,EAAIE,MAAMC,KAAMC,OAAO,SAASC,IAAKL,EAAIM,IAC9CZ,EAAAC,EAAAC,cAAA,OAAKW,IAAKP,EAAIQ,KAAKC,YAK/Bf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACVJ,EAAMqB,QAAQf,IAAI,SAAAC,GAAG,OAClBN,EAAAC,EAAAC,cAAA,KAAGK,KAAMD,EAAIE,MAAMC,KAAMC,OAAO,SAASC,IAAKL,EAAIM,IAC9CZ,EAAAC,EAAAC,cAAA,OAAKW,IAAKP,EAAIQ,KAAKC,YAK/Bf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACVJ,EAAMsB,QAAQhB,IAAI,SAAAC,GAAG,OAClBN,EAAAC,EAAAC,cAAA,KAAGK,KAAMD,EAAIE,MAAMC,KAAMC,OAAO,SAASC,IAAKL,EAAIM,IAC9CZ,EAAAC,EAAAC,cAAA,OAAKW,IAAKP,EAAIQ,KAAKC,cCmG5BO,6MAnHbC,MAAQ,CACNnB,KAAM,GACNY,KAAM,GACNC,KAAM,GACNE,QAAS,GACTC,QAAS,GACTC,QAAS,GACTG,MAAO,uFAGW,IAAAC,EAAAC,KAClBhC,EAASiC,OAAOC,WAAW,EAAG,GAAI,UAC/BC,KAAK,SAAAC,GACJA,EAASC,OAAOF,KAAK,SAAAG,GACnBP,EAAKQ,SAAS,CACZ7B,KAAM4B,IAERE,QAAQC,IAAIH,OAGfI,MAAM,SAAAC,GACLH,QAAQI,MAAMD,KAGlB3C,EAASiC,OAAOC,WAAW,EAAG,GAAI,UAC/BC,KAAK,SAAAC,GACJA,EAASC,OAAOF,KAAK,SAAAG,GACnBP,EAAKQ,SAAS,CACZjB,KAAMgB,IAERE,QAAQC,IAAIH,OAGfI,MAAM,SAAAC,GACLH,QAAQI,MAAMD,KAGlB3C,EAASiC,OAAOC,WAAW,EAAG,GAAI,UAC/BC,KAAK,SAAAC,GACJA,EAASC,OAAOF,KAAK,SAAAG,GACnBP,EAAKQ,SAAS,CACZhB,KAAMe,IAERE,QAAQC,IAAIH,OAGfI,MAAM,SAAAC,GACLH,QAAQI,MAAMD,yCAIRb,GAAO,IAAAe,EAAAb,KACjBhC,EAAS8C,OAAOb,OAAOH,EAAMiB,OAAQ,GAClCZ,KAAK,SAAAC,GACJA,EAASC,OAAOF,KAAK,SAAAG,GACnBO,EAAKN,SAAS,CACZd,QAASa,EAAKU,UAEhBR,QAAQC,IAAI,WAAaI,EAAKhB,MAAMJ,aAGvCiB,MAAM,SAAAC,GACLH,QAAQI,MAAMD,KAElB3C,EAAS8C,OAAOb,OAAOH,EAAMiB,OAAQ,GAClCZ,KAAK,SAAAC,GACJA,EAASC,OAAOF,KAAK,SAAAG,GACnBO,EAAKN,SAAS,CACZb,QAASY,EAAKU,UAEhBR,QAAQC,IAAIH,OAGfI,MAAM,SAAAC,GACLH,QAAQI,MAAMD,KAElB3C,EAAS8C,OAAOb,OAAOH,EAAMiB,OAAQ,GAClCZ,KAAK,SAAAC,GACJA,EAASC,OAAOF,KAAK,SAAAG,GACnBO,EAAKN,SAAS,CACZZ,QAASW,EAAKU,UAEhBR,QAAQC,IAAIH,OAGfI,MAAM,SAAAC,GACLH,QAAQI,MAAMD,sCAKX,IAAAM,EAAAjB,KACP,OACE1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,SAAO0C,KAAK,OAAOC,YAAY,iBAAiBC,SAAU,SAACC,GAAD,OAAWJ,EAAKK,YAAYD,EAAMrC,OAAOuC,UACnGjD,EAAAC,EAAAC,cAAA,oEAILgD,OAAOC,KAAKzB,KAAKH,MAAMJ,SAAW,GAAK+B,OAAOC,KAAKzB,KAAKH,MAAMH,SAAW,GAAK8B,OAAOC,KAAKzB,KAAKH,MAAMF,SAAW,EAC/GrB,EAAAC,EAAAC,cAACkD,EAAD,CAAQhD,KAAMsB,KAAKH,MAAMnB,KAAMY,KAAMU,KAAKH,MAAMP,KAAMC,KAAMS,KAAKH,MAAMN,OAEvEjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACmD,EAAD,CAAclC,QAASO,KAAKH,MAAMJ,QAASC,QAASM,KAAKH,MAAMH,QAASC,QAASK,KAAKH,MAAMF,mBA7GtFiC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC","file":"static/js/main.1c15937d.chunk.js","sourcesContent":["import Unsplash from 'unsplash-js'\r\n\r\nexport const unsplash = new Unsplash({\r\n    applicationId: \"640b696bce9f9fd1916532502c42a90c3e6bee2e598b0d718f1afabf9403e414\",\r\n    secret: \"b70859e0f8fafe7558a6b7ec9f1cdd3ba9ce5912f525a9fee0c383b78fd5f05f\"\r\n});","import React, { Component } from 'react'\r\n\r\nexport const Images = props => {\r\n\r\n    return (\r\n        <div className=\"App-images-content\">\r\n\r\n            <div className=\"col-images\">\r\n                {props.col1.map(img =>\r\n                    <a href={img.links.html} target=\"_blank\" key={img.id}>\r\n                        <img src={img.urls.small} />\r\n                    </a>\r\n                )\r\n                }\r\n            </div>\r\n            <div className=\"col-images\">\r\n                {props.col2.map(img =>\r\n                    <a href={img.links.html} target=\"_blank\" key={img.id}>\r\n                        <img src={img.urls.small} />\r\n                    </a>\r\n                )\r\n                }\r\n            </div>\r\n            <div className=\"col-images\">\r\n                {props.col3.map(img =>\r\n                    <a href={img.links.html} target=\"_blank\" key={img.id}>\r\n                        <img src={img.urls.small} />\r\n                    </a>\r\n                )\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport const SearchImages = props => {\r\n    return (\r\n        <div className=\"App-images-search\">\r\n            <div className=\"col-images\">\r\n                {props.search1.map(img =>\r\n                    <a href={img.links.html} target=\"_blank\" key={img.id}>\r\n                        <img src={img.urls.small} />\r\n                    </a>\r\n                )\r\n                }\r\n            </div>\r\n            <div className=\"col-images\">\r\n                {props.search2.map(img =>\r\n                    <a href={img.links.html} target=\"_blank\" key={img.id}>\r\n                        <img src={img.urls.small} />\r\n                    </a>\r\n                )\r\n                }\r\n            </div>\r\n            <div className=\"col-images\">\r\n                {props.search3.map(img =>\r\n                    <a href={img.links.html} target=\"_blank\" key={img.id}>\r\n                        <img src={img.urls.small} />\r\n                    </a>\r\n                )\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { Component } from 'react'\nimport './App.css'\nimport { unsplash } from './utils/api'\nimport { Images } from './components/Images';\nimport { SearchImages } from './components/SearchImages';\n\nclass App extends Component {\n\n  state = {\n    col1: [],\n    col2: [],\n    col3: [],\n    search1: [],\n    search2: [],\n    search3: [],\n    query: {}\n  }\n\n  componentDidMount() {\n    unsplash.photos.listPhotos(1, 30, \"latest\")\n      .then(response => {\n        response.json().then(data => {\n          this.setState({\n            col1: data\n          })\n          console.log(data)\n        })\n      })\n      .catch(err => {\n        console.error(err);\n      })\n\n    unsplash.photos.listPhotos(2, 30, \"latest\")\n      .then(response => {\n        response.json().then(data => {\n          this.setState({\n            col2: data\n          })\n          console.log(data)\n        })\n      })\n      .catch(err => {\n        console.error(err);\n      })\n\n    unsplash.photos.listPhotos(3, 30, \"latest\")\n      .then(response => {\n        response.json().then(data => {\n          this.setState({\n            col3: data\n          })\n          console.log(data)\n        })\n      })\n      .catch(err => {\n        console.error(err);\n      })\n  }\n\n  handleInput(query) {\n    unsplash.search.photos(query.trim(), 1)\n      .then(response => {\n        response.json().then(data => {\n          this.setState({\n            search1: data.results\n          })\n          console.log(\"search: \" + this.state.search1)\n        })\n      })\n      .catch(err => {\n        console.error(err);\n      })\n    unsplash.search.photos(query.trim(), 2)\n      .then(response => {\n        response.json().then(data => {\n          this.setState({\n            search2: data.results\n          })\n          console.log(data)\n        })\n      })\n      .catch(err => {\n        console.error(err);\n      })\n    unsplash.search.photos(query.trim(), 3)\n      .then(response => {\n        response.json().then(data => {\n          this.setState({\n            search3: data.results\n          })\n          console.log(data)\n        })\n      })\n      .catch(err => {\n        console.error(err);\n      })\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"App-search\">\n            <div className=\"App-search-content\">\n              <h1>API - Unsplash</h1>\n              <input type=\"text\" placeholder=\"Search a image\" onChange={(event) => this.handleInput(event.target.value)} />\n              <small>Example: wallpaper, background, dogs, technology</small>\n            </div>\n          </div>\n        </header>\n        {Object.keys(this.state.search1) < 1 && Object.keys(this.state.search2) < 1 && Object.keys(this.state.search3) < 1 ?\n          <Images col1={this.state.col1} col2={this.state.col2} col3={this.state.col3} />\n          :\n          <div>\n            <SearchImages search1={this.state.search1} search2={this.state.search2} search3={this.state.search3} />\n          </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}